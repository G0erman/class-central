{# set user details #}
{% if app.user %}
    {% set userInfo = user_service.getUserMetaDataForAnalyticsJsonNonStatic(app.user) %}
{% endif %}


<!-- Including google analytics. The parameter ganalytics_id must be set in parameters.ini -->
<script type="text/javascript">
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
      (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
          m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');


  {# Dont count the admin users in user stats #}
  {% if app.user and not is_granted('ROLE_ADMIN')   %}
      ga('create', '{{ ganalytics_id }}', {'userId':'{{ app.user.anonId }}'});
  {% else %}
      ga('create', '{{ ganalytics_id }}', 'auto');
  {% endif %}
  ga('create', '{{ ganalytics_id }}', 'auto');
  ga('set', 'anonymizeIp', true);
  ga('send', 'pageview');

  function recordOutboundLink(link, initiative, coursename, stream) {
      try {
          ga('send','event', 'Outbound Clicks - Course from Initiative' , initiative, coursename );
          ga('send','event', 'Outbound Clicks - Course from Stream' , stream, coursename );
          window.open(link);
      }catch(err){}
  }

  function recordOutboundLinkWithoutRedirect( initiative, coursename, stream) {
      try {
          ga('send','event', 'Outbound Clicks - Course from Initiative' , initiative, coursename );
          ga('send','event', 'Outbound Clicks - Course from Stream' , stream, coursename );
      }catch(err){}
  }

  function recordInboundLink(link, initiative, coursename, section) {
      try {
          ga('send','event', 'Inbound Clicks - Course from Initiative' , initiative, coursename );
          ga('send','event', 'Inbound Clicks - Course from Section' , section, coursename );
      }catch(err){}
  }

  function recordTaglineClicks(link, initiative) {
      try {
          ga('send','event', 'Tagline Clicks' , initiative );
          window.open(link);
      }catch(err){}
  }
</script>

{# Section to initialize tests and generate variations. This has to be done for analytics to be tracked properly #}
{#
Example. Do not uncomment.
{{ abTesting.initializeTest("table_row_text_ad_june_2018",["simplified_current","blue_ad_with_ratings"])  }}
{% set variation = abTesting.getTestVariation("table_row_text_ad_june_2018") %}
#}
{% set sideBarTestVariations = {"simplified_current":1,"blue_ad":1} %}
{{ abTesting.initializeTest("sidebar_ad_june_2018",  sideBarTestVariations)}}

<!-- Keen.io JS SDK -->
<script type="text/javascript">
!function(a,b){a("Keen","https://d26b395fwzu5fz.cloudfront.net/3.4.1/keen-tracker.min.js",b)}(function(a,b,c){var d,e,f;c["_"+a]={},c[a]=function(b){c["_"+a].clients=c["_"+a].clients||{},c["_"+a].clients[b.projectId]=this,this._config=b},c[a].ready=function(b){c["_"+a].ready=c["_"+a].ready||[],c["_"+a].ready.push(b)},d=["addEvent","setGlobalProperties","trackExternalLink","on"];for(var g=0;g<d.length;g++){var h=d[g],i=function(a){return function(){return this["_"+a]=this["_"+a]||[],this["_"+a].push(arguments),this}};c[a].prototype[h]=i(h)}e=document.createElement("script"),e.async=!0,e.src=b,f=document.getElementsByTagName("script")[0],f.parentNode.insertBefore(e,f)},this);
</script>
<script src="{{ assetService.getBundledAssetFileName('analytics.js') }}"></script>
<script type="text/javascript">
  // init CC Analytics
  window.CC = { Class: {} };
  window.CC.Class.Analytics = new window.Analytics({
    projectId: "{{ keen_project_id }}",
    writeKey: "{{keen_write_key }}",
    trackImpressions: true,
    globalProps: {
      {% if page is defined %}
        page: "{{ page }}",
      {% endif %}
      {% if userInfo is defined %}
        user: {{ userInfo|raw }},
      {% endif %}
      {% if pageMetadata is defined %}
        metadata: {{ pageMetadata|json_encode()|raw }},
      {% endif %}
      session_id: "{{ app.session.getId() }}",
      deviceType: "{{ ts.device() }}",
      abTests: {{ abTesting.variations|json_encode()|raw }}
    }
  });

  CC.track = window.CC.Class.Analytics.track.bind(window.CC.Class.Analytics);
  CC.getTrackImpressionNodes = window.CC.Class.Analytics.getTrackImpressionNodes.bind(window.CC.Class.Analytics);
</script>
